import heapq
from collections import deque

class Graph:
    def __init__(self):
        self.adj_list = {}  # {node: [(neighbor, weight), ...]}

    def add_node(self, city):
        if city not in self.adj_list:
            self.adj_list[city] = []

    def add_edge(self, from_city, to_city, weight=1):
        self.add_node(from_city)
        self.add_node(to_city)
        self.adj_list[from_city].append((to_city, weight))
        self.adj_list[to_city].append((from_city, weight))  # Undirected

    def remove_node(self, city):
        if city in self.adj_list:
            del self.adj_list[city]
        for neighbors in self.adj_list.values():
            neighbors[:] = [(n, w) for n, w in neighbors if n != city]

    def remove_edge(self, from_city, to_city):
        self.adj_list[from_city] = [(n, w) for n, w in self.adj_list[from_city] if n != to_city]
        self.adj_list[to_city] = [(n, w) for n, w in self.adj_list[to_city] if n != from_city]

    def dijkstra(self, start, end):
        distances = {city: float('inf') for city in self.adj_list}
        distances[start] = 0
        prev = {city: None for city in self.adj_list}
        queue = [(0, start)]

        while queue:
            curr_dist, curr_city = heapq.heappop(queue)
            if curr_city == end:
                break
            for neighbor, weight in self.adj_list[curr_city]:
                distance = curr_dist + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    prev[neighbor] = curr_city
                    heapq.heappush(queue, (distance, neighbor))

        path = []
        crawl = end
        while crawl:
            path.insert(0, crawl)
            crawl = prev[crawl]

        return path, distances[end]

    def bfs(self, start, end):
        visited = {city: False for city in self.adj_list}
        prev = {city: None for city in self.adj_list}
        queue = deque([start])
        visited[start] = True

        while queue:
            city = queue.popleft()
            if city == end:
                break
            for neighbor, _ in self.adj_list[city]:
                if not visited[neighbor]:
                    visited[neighbor] = True
                    prev[neighbor] = city
                    queue.append(neighbor)

        path = []
        crawl = end
        while crawl:
            path.insert(0, crawl)
            crawl = prev[crawl]

        return path

def main():
    g = Graph()
    g.add_edge("Hyderabad", "Delhi", 10)
    g.add_edge("Hyderabad", "Mumbai", 5)
    g.add_edge("Delhi", "Mumbai", 2)
    g.add_edge("Delhi", "Chennai", 15)

    print("--- Weighted (Dijkstra's Algorithm) ---")
    path, dist = g.dijkstra("Hyderabad", "Chennai")
    print(f"Path: {path}, Distance: {dist}")

    print("\n--- Unweighted (BFS) ---")
    path_bfs = g.bfs("Hyderabad", "Chennai")
    print(f"Path: {path_bfs}")

if __name__ == '__main__':
    main()
